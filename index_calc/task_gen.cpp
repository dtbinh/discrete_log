#include <iostream>
#include <fstream>
#include <NTL/ZZ.h>
NTL_CLIENT

// Программа для генерации задачи дискретного логарифмирования заданной размерности 
int main() {
ZZ a,b,p,r; //основание, степень, модуль, порядок циклической группы, образованной основанием
ZZ x; //Показатель
long len; //Длина модуля

//Спросим длину модуля
//Фактически, модуль будет иметь длину len+1 двоичных разрядов
cin >> len;

//Простое число Жермен - p - простое и 2*p+1 - тоже простое
//Генерируем число заданной размерности (в двоичных разрядах)
p=GenGermainPrime_ZZ(len);

//Порядок циклической группы будет p-1. Мы будем искать образующую :)
//Всё так, как учил нас Великий Шнайер в Красной Книге
r=2*p;
//Модуль
p=2*p+1;

//Начнём с корня 4 степени из модуля
//Чтобы образующая была не слишком большой, но и не слишком маленькой
//Маленькая образующая приведёт к появлений линейно зависимых строк в начале базы разложения
a=SqrRoot(SqrRoot(p));
//Найдём образующую
while ((PowerMod(a,2,p)==1) || (PowerMod(a,(p-1)/2,p)==1))
	a++;

//Спросим, в какую степень x мы бы хотели возвести образующую
//cin >> x;
x=RandomBnd(p-10)+3;
//Получим степень b=a^x (mod p)
b=PowerMod(a,x,p);
//Выдадим задачу на стандартный вывод
cout << a << endl << b << endl << p << endl << r << endl;
//Вот программе и конец, а кто - кодил - молодец!
return 0;
}
